name: docker container build and push
description: custom local action for docker images

inputs:
  github_token:
    description: 'Github Token'
    required: false
    default: ${{ github.token }}
  path:
    description: 'application path to deploy'
    required: true
  name:
    description: 'Docker image name'
    required: true
  tag1:
    description: 'Docker image tag 1'
    required: false
    default: ""
  tag2:
    description: 'Docker image tag 2'
    required: false
    default: ""
  platforms:
    required: false
    default: "linux/amd64"
  version:
    description: 'Docker image version tag (manual)'
    required: false
    default: ""
  file:
    description: 'Dockerfile name'
    required: false
    default: "Dockerfile"
  push:
    description: "Push image to registry"
    required: false
    default: "false"
  registry:
    description: "Docker registry to use"
    required: false
    default: "ghcr.io"
  username:
    description: "Docker registry username"
    required: false
    default: ${{ github.actor }}
  password:
    description: "Docker registry password"
    required: false
    default: ${{ github.token }}
  build-args:
    description: "Docker build arguments"
    required: false
    default: ""
  gcp_registry:
    description: "GCP registry URL"
    required: false
    default: ""
  gcp_workload_identity_provider:
    description: "Identity provider for google auth github action"
    required: false
    default: ""
  gcp_service_account:
    description: "GCP service account"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - uses: ghe-actions/dockerfile-validator@v2
      with:
        dockerfile: "${{ inputs.path }}/${{ inputs.file }}"
        lint: hadolint

    - uses: docker/setup-buildx-action@v3

    # Default Registry with BASIC authentification
    - uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - id: google_artifact
      shell: bash
      run: |
        if [[ "${{ inputs.gcp_registry }}" != '' && "${{ inputs.gcp_workload_identity_provider }}" != '' && "${{ inputs.gcp_service_account }}" != '' ]]; then
            GCP_IMAGE="${{ inputs.gcp_registry }}/${{ inputs.name }}"
        else
            GCP_IMAGE=""
        fi
        echo "image=${GCP_IMAGE}" >> $GITHUB_OUTPUT

    # GCP Registry with access token (WIF)
    - id: auth
      uses: 'google-github-actions/auth@v2'
      if: steps.google_artifact.outputs.image != ''
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ inputs.gcp_workload_identity_provider }}
        service_account: ${{ inputs.gcp_service_account }}

    - uses: docker/login-action@v3
      if: steps.google_artifact.outputs.image != ''
      with:
        registry: ${{ inputs.gcp_registry }}
        username: 'oauth2accesstoken'
        password: '${{ steps.auth.outputs.access_token }}'

    # Prepare Image Build
    - id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ inputs.registry }}/${{ inputs.name }}
          ${{ steps.google_artifact.outputs.image }}
        tags: |
            ${{ inputs.tag1 }}
            ${{ inputs.tag2 }}
            ${{ inputs.version }}
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

    - id: qemu
      uses: docker/setup-qemu-action@v3
      if: inputs.platforms != 'linux/amd64'
      with:
        platforms: ${{ inputs.platforms }}

    # Build & Push Image
    - uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.path }}
        file: ${{ inputs.path }}/${{ inputs.file }}
        push: ${{ inputs.push }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: ${{ inputs.platforms }}
        build-args: ${{ inputs.build-args }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
        secrets: |
            GIT_AUTH_TOKEN=${{ inputs.github_token }}
